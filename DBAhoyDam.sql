-- MySQL Script generated by MySQL Workbench
-- 04/29/16 14:40:59
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Artiest`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Artiest` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Artiest` (
  `idArtiest` INT NOT NULL,
  `beschrijving` VARCHAR(45) NULL,
  `artiestGeluidsFragment` VARCHAR(45) NULL,
  `artiestFoto` VARCHAR(45) NULL,
  `artiestVerwijzing` VARCHAR(45) NULL,
  `artiestVideoFragment` VARCHAR(45) NULL,
  `artiestNaam` VARCHAR(45) NULL,
  PRIMARY KEY (`idArtiest`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Genre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Genre` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Genre` (
  `genreNaam` VARCHAR(45) NULL,
  `genreID` INT NOT NULL,
  PRIMARY KEY (`genreID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Mailinglist`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Mailinglist` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Mailinglist` (
  `email` VARCHAR(45) NOT NULL,
  `voornaam` VARCHAR(45) NULL,
  `achternaam` VARCHAR(45) NULL,
  PRIMARY KEY (`email`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`GenreRegel`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`GenreRegel` ;

CREATE TABLE IF NOT EXISTS `mydb`.`GenreRegel` (
  `email` VARCHAR(45) NOT NULL,
  `genre` INT NOT NULL,
  PRIMARY KEY (`email`, `genre`),
  INDEX `FK_Genre_idx` (`genre` ASC),
  CONSTRAINT `FK_Genre`
    FOREIGN KEY (`genre`)
    REFERENCES `mydb`.`Genre` (`genreID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Email`
    FOREIGN KEY (`email`)
    REFERENCES `mydb`.`Mailinglist` (`email`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`EvenementenType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`EvenementenType` ;

CREATE TABLE IF NOT EXISTS `mydb`.`EvenementenType` (
  `EventID` INT NOT NULL,
  `EventType` VARCHAR(45) NULL,
  PRIMARY KEY (`EventID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Optreden`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Optreden` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Optreden` (
  `idOptreden` INT NOT NULL,
  `artiest` VARCHAR(45) NULL,
  `optredenDatum` DATE NULL,
  `evenementenType` INT NOT NULL,
  `kaartenVerkoopEinde` DATE NULL,
  `beschikbareKaarten` INT NULL,
  `bestelling` VARCHAR(45) NULL,
  `ticketPrijs` FLOAT NULL,
  `idZaal` INT NOT NULL,
  PRIMARY KEY (`idOptreden`, `evenementenType`, `idZaal`),
  INDEX `FK_EventType_idx` (`evenementenType` ASC),
  CONSTRAINT `FK_EventType`
    FOREIGN KEY (`evenementenType`)
    REFERENCES `mydb`.`EvenementenType` (`EventID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`ArtiestenRegel`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`ArtiestenRegel` ;

CREATE TABLE IF NOT EXISTS `mydb`.`ArtiestenRegel` (
  `idArtiest` INT NOT NULL,
  `optredenID` INT NOT NULL,
  PRIMARY KEY (`idArtiest`, `optredenID`),
  INDEX `FK_Optreden_idx` (`optredenID` ASC),
  CONSTRAINT `FK_Artiest`
    FOREIGN KEY (`idArtiest`)
    REFERENCES `mydb`.`Artiest` (`idArtiest`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Optreden`
    FOREIGN KEY (`optredenID`)
    REFERENCES `mydb`.`Optreden` (`idOptreden`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`VoorgesteldConcert`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`VoorgesteldConcert` ;

CREATE TABLE IF NOT EXISTS `mydb`.`VoorgesteldConcert` (
  `idExtraConcert` INT NOT NULL,
  `artiestNaam` VARCHAR(45) NULL,
  `datumUitverkocht` VARCHAR(45) NULL,
  `aantalBezoekers` INT NULL,
  `datumOptreden` DATE NULL,
  `zaal` VARCHAR(45) NULL,
  `optreden` INT NOT NULL,
  PRIMARY KEY (`idExtraConcert`, `optreden`),
  INDEX `FK_VoorgesteldConcert_idx` (`optreden` ASC),
  CONSTRAINT `FK_VoorgesteldConcert`
    FOREIGN KEY (`optreden`)
    REFERENCES `mydb`.`Optreden` (`idOptreden`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Tickets`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Tickets` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Tickets` (
  `idTickets` INT NOT NULL,
  PRIMARY KEY (`idTickets`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Bestelling`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Bestelling` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Bestelling` (
  `kaarten` INT NOT NULL,
  `bestellingNummer` INT NOT NULL,
  `bestellingDatum` DATE NULL,
  `kaartenGeldig` TINYINT(1) NULL,
  PRIMARY KEY (`bestellingNummer`, `kaarten`),
  INDEX `FK_Kaarten_idx` (`kaarten` ASC),
  CONSTRAINT `FK_Kaarten`
    FOREIGN KEY (`kaarten`)
    REFERENCES `mydb`.`Tickets` (`idTickets`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`OptredenRegel`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`OptredenRegel` ;

CREATE TABLE IF NOT EXISTS `mydb`.`OptredenRegel` (
  `idOptreden` INT NOT NULL,
  `bestellingNummer` INT NOT NULL,
  INDEX `FK_Bestellingnummer_idx` (`bestellingNummer` ASC),
  CONSTRAINT `FK_OptredenRegel`
    FOREIGN KEY (`idOptreden`)
    REFERENCES `mydb`.`Optreden` (`idOptreden`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_OptredenBestelling`
    FOREIGN KEY (`bestellingNummer`)
    REFERENCES `mydb`.`Bestelling` (`bestellingNummer`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Gebruiker`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Gebruiker` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Gebruiker` (
  `idGebruiker` INT NOT NULL AUTO_INCREMENT,
  `Voornaam` VARCHAR(45) NULL,
  `Achternaam` VARCHAR(45) NULL,
  `Woonplaats` VARCHAR(45) NULL,
  `Telefoonnummer` VARCHAR(45) NULL,
  PRIMARY KEY (`idGebruiker`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Rol`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Rol` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Rol` (
  `idRol` INT NOT NULL,
  `Omschrijving` VARCHAR(70) NOT NULL,
  PRIMARY KEY (`idRol`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`GebruikerRol`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`GebruikerRol` ;

CREATE TABLE IF NOT EXISTS `mydb`.`GebruikerRol` (
  `idGebruiker` INT NOT NULL,
  `idRol` INT NOT NULL,
  INDEX `FK_GebruikerRol_Rol_idx` (`idRol` ASC),
  CONSTRAINT `FK_GebruikerRol_IDGebruiker`
    FOREIGN KEY (`idGebruiker`)
    REFERENCES `mydb`.`Gebruiker` (`idGebruiker`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_GebruikerRol_Rol`
    FOREIGN KEY (`idRol`)
    REFERENCES `mydb`.`Rol` (`idRol`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Categorie`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Categorie` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Categorie` (
  `idCategorie` INT NOT NULL,
  `categorie` VARCHAR(45) NULL,
  PRIMARY KEY (`idCategorie`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Persbericht`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Persbericht` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Persbericht` (
  `idPersbericht` INT NOT NULL,
  `datum` DATE NULL,
  `categorie` INT NULL,
  `doorverwijzing` VARCHAR(45) NULL,
  `bericht` VARCHAR(45) NULL,
  PRIMARY KEY (`idPersbericht`),
  INDEX `FK_Categorie_idx` (`categorie` ASC),
  CONSTRAINT `FK_Categorie`
    FOREIGN KEY (`categorie`)
    REFERENCES `mydb`.`Categorie` (`idCategorie`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`PersMail`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`PersMail` ;

CREATE TABLE IF NOT EXISTS `mydb`.`PersMail` (
  `email` VARCHAR(45) NOT NULL,
  `idPers` INT NOT NULL,
  PRIMARY KEY (`email`, `idPers`),
  INDEX `FK_Pers_idx` (`idPers` ASC),
  CONSTRAINT `FK_Email_Pers`
    FOREIGN KEY (`email`)
    REFERENCES `mydb`.`Mailinglist` (`email`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_PersID`
    FOREIGN KEY (`idPers`)
    REFERENCES `mydb`.`Persbericht` (`idPersbericht`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`SpeciaalEvenement`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`SpeciaalEvenement` ;

CREATE TABLE IF NOT EXISTS `mydb`.`SpeciaalEvenement` (
  `idSpeciaalEvenement` INT NOT NULL,
  `beschrijving` VARCHAR(45) NULL,
  PRIMARY KEY (`idSpeciaalEvenement`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Onderhoud`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Onderhoud` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Onderhoud` (
  `idOnderhoud` INT NOT NULL,
  `beschrijving` VARCHAR(45) NULL,
  PRIMARY KEY (`idOnderhoud`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Verbouwing`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Verbouwing` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Verbouwing` (
  `idVerbouwing` INT NOT NULL,
  `beschrijving` VARCHAR(45) NULL,
  PRIMARY KEY (`idVerbouwing`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Zaal`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Zaal` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Zaal` (
  `idZaal` INT NOT NULL,
  `zaalStatus` VARCHAR(45) NULL,
  `zaalBeschrijving` VARCHAR(45) NULL,
  PRIMARY KEY (`idZaal`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Agenda`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Agenda` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Agenda` (
  `begin` DATETIME NOT NULL,
  `eind` DATETIME NULL,
  `zaal` INT NOT NULL,
  `optreden` INT NULL,
  `speciaalEvenement` INT NULL,
  `onderhoud` INT NULL,
  `verbouwing` INT NULL,
  `itemstatus` VARCHAR(45) NULL,
  PRIMARY KEY (`begin`),
  INDEX `fk_speciaalEvenement_idx` (`speciaalEvenement` ASC),
  INDEX `fk_Onderhoud_idx` (`onderhoud` ASC),
  INDEX `fk_Verbouwing_idx` (`verbouwing` ASC),
  INDEX `fk_Zaal_idx` (`zaal` ASC),
  INDEX `fk_Optreden_idx` (`optreden` ASC),
  CONSTRAINT `FK_Agenda_speciaalEvenement`
    FOREIGN KEY (`speciaalEvenement`)
    REFERENCES `mydb`.`SpeciaalEvenement` (`idSpeciaalEvenement`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Agenda_Onderhoud`
    FOREIGN KEY (`onderhoud`)
    REFERENCES `mydb`.`Onderhoud` (`idOnderhoud`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Agenda_Verbouwing`
    FOREIGN KEY (`verbouwing`)
    REFERENCES `mydb`.`Verbouwing` (`idVerbouwing`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Agenda_Zaal`
    FOREIGN KEY (`zaal`)
    REFERENCES `mydb`.`Zaal` (`idZaal`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Agenda_Optreden`
    FOREIGN KEY (`optreden`)
    REFERENCES `mydb`.`Optreden` (`idOptreden`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`BestellingRegel`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`BestellingRegel` ;

CREATE TABLE IF NOT EXISTS `mydb`.`BestellingRegel` (
  `bestellingen` INT NOT NULL,
  `idKlant` INT NOT NULL,
  PRIMARY KEY (`bestellingen`, `idKlant`),
  INDEX `fk_Gebruiker_idx` (`idKlant` ASC),
  CONSTRAINT `fk_Bestelling`
    FOREIGN KEY (`bestellingen`)
    REFERENCES `mydb`.`Bestelling` (`bestellingNummer`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Gebruiker`
    FOREIGN KEY (`idKlant`)
    REFERENCES `mydb`.`Gebruiker` (`idGebruiker`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`ArtiestGenre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`ArtiestGenre` ;

CREATE TABLE IF NOT EXISTS `mydb`.`ArtiestGenre` (
  `idArtiest` INT NOT NULL,
  `genreID` INT NOT NULL,
  PRIMARY KEY (`idArtiest`, `genreID`),
  INDEX `FK_Genre_idx` (`genreID` ASC),
  CONSTRAINT `FK_ArtiestGenre_Artiest`
    FOREIGN KEY (`idArtiest`)
    REFERENCES `mydb`.`Artiest` (`idArtiest`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ArtiestGenre_Genre`
    FOREIGN KEY (`genreID`)
    REFERENCES `mydb`.`Genre` (`genreID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Login`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Login` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Login` (
  `idGebruiker` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(45) NULL,
  `wachtwoord` VARCHAR(45) NULL,
  PRIMARY KEY (`idGebruiker`),
  CONSTRAINT `FK_Login_ID`
    FOREIGN KEY (`idGebruiker`)
    REFERENCES `mydb`.`Gebruiker` (`idGebruiker`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `mydb`.`Artiest`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Artiest` (`idArtiest`, `beschrijving`, `artiestGeluidsFragment`, `artiestFoto`, `artiestVerwijzing`, `artiestVideoFragment`, `artiestNaam`) VALUES (1, 'Goede Artiest', 'geluid.mp3', 'artiest1.png', NULL, NULL, 'Muze');
INSERT INTO `mydb`.`Artiest` (`idArtiest`, `beschrijving`, `artiestGeluidsFragment`, `artiestFoto`, `artiestVerwijzing`, `artiestVideoFragment`, `artiestNaam`) VALUES (2, 'Geweldige Artiest', 'geluid.mp3', 'artiest2.jpg', NULL, NULL, 'Red Hot Chili Peppers');
INSERT INTO `mydb`.`Artiest` (`idArtiest`, `beschrijving`, `artiestGeluidsFragment`, `artiestFoto`, `artiestVerwijzing`, `artiestVideoFragment`, `artiestNaam`) VALUES (3, 'Coole artiest', 'geluid.mp3', 'artiest3.jpg', NULL, NULL, 'Coldplay');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Genre`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Genre` (`genreNaam`, `genreID`) VALUES ('Rock', 1);
INSERT INTO `mydb`.`Genre` (`genreNaam`, `genreID`) VALUES ('Pop', 2);
INSERT INTO `mydb`.`Genre` (`genreNaam`, `genreID`) VALUES ('Klassiek', 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Mailinglist`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Mailinglist` (`email`, `voornaam`, `achternaam`) VALUES ('jan@mail.nl', 'jan', 'jansen');
INSERT INTO `mydb`.`Mailinglist` (`email`, `voornaam`, `achternaam`) VALUES ('petra@mail.net', 'petra', 'de Wit');
INSERT INTO `mydb`.`Mailinglist` (`email`, `voornaam`, `achternaam`) VALUES ('mbo@mail.com', 'mbo', 'utrecht');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`GenreRegel`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`GenreRegel` (`email`, `genre`) VALUES ('jan@mail.nl', 3);
INSERT INTO `mydb`.`GenreRegel` (`email`, `genre`) VALUES ('mbo@mail.com', 1);
INSERT INTO `mydb`.`GenreRegel` (`email`, `genre`) VALUES ('petra@mail.net', 2);
INSERT INTO `mydb`.`GenreRegel` (`email`, `genre`) VALUES ('jan@mail.nl', 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`EvenementenType`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`EvenementenType` (`EventID`, `EventType`) VALUES (1, 'Concert');
INSERT INTO `mydb`.`EvenementenType` (`EventID`, `EventType`) VALUES (2, 'Meet&Greet');
INSERT INTO `mydb`.`EvenementenType` (`EventID`, `EventType`) VALUES (3, 'Vergadering');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Optreden`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Optreden` (`idOptreden`, `artiest`, `optredenDatum`, `evenementenType`, `kaartenVerkoopEinde`, `beschikbareKaarten`, `bestelling`, `ticketPrijs`, `idZaal`) VALUES (1, 'Muze', '2016-06-29', 1, '2016-06-26', 20, '1', 4.20, 2);
INSERT INTO `mydb`.`Optreden` (`idOptreden`, `artiest`, `optredenDatum`, `evenementenType`, `kaartenVerkoopEinde`, `beschikbareKaarten`, `bestelling`, `ticketPrijs`, `idZaal`) VALUES (2, 'Red Hot Chili Peppers', '2016-06-30', 1, '2016-06-27', 5, '3', 7, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`ArtiestenRegel`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`ArtiestenRegel` (`idArtiest`, `optredenID`) VALUES (1, 2);
INSERT INTO `mydb`.`ArtiestenRegel` (`idArtiest`, `optredenID`) VALUES (2, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`VoorgesteldConcert`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`VoorgesteldConcert` (`idExtraConcert`, `artiestNaam`, `datumUitverkocht`, `aantalBezoekers`, `datumOptreden`, `zaal`, `optreden`) VALUES (1, 'Red Hot Chili Peppers', '2016-02-01', 200, '2016-06-30', '1', 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Tickets`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Tickets` (`idTickets`) VALUES (1);
INSERT INTO `mydb`.`Tickets` (`idTickets`) VALUES (2);
INSERT INTO `mydb`.`Tickets` (`idTickets`) VALUES (3);
INSERT INTO `mydb`.`Tickets` (`idTickets`) VALUES (4);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Bestelling`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Bestelling` (`kaarten`, `bestellingNummer`, `bestellingDatum`, `kaartenGeldig`) VALUES (4, 1, '2016-03-02', 1);
INSERT INTO `mydb`.`Bestelling` (`kaarten`, `bestellingNummer`, `bestellingDatum`, `kaartenGeldig`) VALUES (1, 3, '2016-03-02', 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`OptredenRegel`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`OptredenRegel` (`idOptreden`, `bestellingNummer`) VALUES (1, 1);
INSERT INTO `mydb`.`OptredenRegel` (`idOptreden`, `bestellingNummer`) VALUES (1, 1);
INSERT INTO `mydb`.`OptredenRegel` (`idOptreden`, `bestellingNummer`) VALUES (1, 1);
INSERT INTO `mydb`.`OptredenRegel` (`idOptreden`, `bestellingNummer`) VALUES (2, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Gebruiker`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Gebruiker` (`idGebruiker`, `Voornaam`, `Achternaam`, `Woonplaats`, `Telefoonnummer`) VALUES (1, 'Harry', 'de Wit', NULL, NULL);
INSERT INTO `mydb`.`Gebruiker` (`idGebruiker`, `Voornaam`, `Achternaam`, `Woonplaats`, `Telefoonnummer`) VALUES (2, 'Jochem', 'de Jong', NULL, NULL);
INSERT INTO `mydb`.`Gebruiker` (`idGebruiker`, `Voornaam`, `Achternaam`, `Woonplaats`, `Telefoonnummer`) VALUES (3, 'Jan', 'Jansen', NULL, NULL);
INSERT INTO `mydb`.`Gebruiker` (`idGebruiker`, `Voornaam`, `Achternaam`, `Woonplaats`, `Telefoonnummer`) VALUES (4, 'Jasmine', 'van Dalen', NULL, NULL);
INSERT INTO `mydb`.`Gebruiker` (`idGebruiker`, `Voornaam`, `Achternaam`, `Woonplaats`, `Telefoonnummer`) VALUES (5, 'Mien', 'De Wit', NULL, NULL);
INSERT INTO `mydb`.`Gebruiker` (`idGebruiker`, `Voornaam`, `Achternaam`, `Woonplaats`, `Telefoonnummer`) VALUES (6, 'Peter', 'De bruijn', NULL, NULL);
INSERT INTO `mydb`.`Gebruiker` (`idGebruiker`, `Voornaam`, `Achternaam`, `Woonplaats`, `Telefoonnummer`) VALUES (7, 'Kees', 'Kroes', NULL, NULL);
INSERT INTO `mydb`.`Gebruiker` (`idGebruiker`, `Voornaam`, `Achternaam`, `Woonplaats`, `Telefoonnummer`) VALUES (8, 'Sanne', 'van Zaal', NULL, NULL);
INSERT INTO `mydb`.`Gebruiker` (`idGebruiker`, `Voornaam`, `Achternaam`, `Woonplaats`, `Telefoonnummer`) VALUES (9, 'Anne', 'Soerdien', NULL, NULL);
INSERT INTO `mydb`.`Gebruiker` (`idGebruiker`, `Voornaam`, `Achternaam`, `Woonplaats`, `Telefoonnummer`) VALUES (10, 'Lisa', 'van Hoogdalem', NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Rol`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Rol` (`idRol`, `Omschrijving`) VALUES (1, 'Klant');
INSERT INTO `mydb`.`Rol` (`idRol`, `Omschrijving`) VALUES (2, 'Zaalbeheerder');
INSERT INTO `mydb`.`Rol` (`idRol`, `Omschrijving`) VALUES (3, 'Beheerder');
INSERT INTO `mydb`.`Rol` (`idRol`, `Omschrijving`) VALUES (4, 'Developer');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`GebruikerRol`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`GebruikerRol` (`idGebruiker`, `idRol`) VALUES (1, 1);
INSERT INTO `mydb`.`GebruikerRol` (`idGebruiker`, `idRol`) VALUES (2, 1);
INSERT INTO `mydb`.`GebruikerRol` (`idGebruiker`, `idRol`) VALUES (3, 1);
INSERT INTO `mydb`.`GebruikerRol` (`idGebruiker`, `idRol`) VALUES (4, 1);
INSERT INTO `mydb`.`GebruikerRol` (`idGebruiker`, `idRol`) VALUES (5, 2);
INSERT INTO `mydb`.`GebruikerRol` (`idGebruiker`, `idRol`) VALUES (6, 2);
INSERT INTO `mydb`.`GebruikerRol` (`idGebruiker`, `idRol`) VALUES (7, 3);
INSERT INTO `mydb`.`GebruikerRol` (`idGebruiker`, `idRol`) VALUES (8, 4);
INSERT INTO `mydb`.`GebruikerRol` (`idGebruiker`, `idRol`) VALUES (9, 4);
INSERT INTO `mydb`.`GebruikerRol` (`idGebruiker`, `idRol`) VALUES (10, 4);
INSERT INTO `mydb`.`GebruikerRol` (`idGebruiker`, `idRol`) VALUES (1, 3);
INSERT INTO `mydb`.`GebruikerRol` (`idGebruiker`, `idRol`) VALUES (2, 4);
INSERT INTO `mydb`.`GebruikerRol` (`idGebruiker`, `idRol`) VALUES (7, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Categorie`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Categorie` (`idCategorie`, `categorie`) VALUES (1, 'Bestelling Mails');
INSERT INTO `mydb`.`Categorie` (`idCategorie`, `categorie`) VALUES (2, 'Reservering Mails');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Persbericht`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Persbericht` (`idPersbericht`, `datum`, `categorie`, `doorverwijzing`, `bericht`) VALUES (1, '2016-03-01', 1, NULL, 'Bestelling ontvangen');
INSERT INTO `mydb`.`Persbericht` (`idPersbericht`, `datum`, `categorie`, `doorverwijzing`, `bericht`) VALUES (2, '2016-03-01', 2, NULL, 'Reservering ontvangen');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`PersMail`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`PersMail` (`email`, `idPers`) VALUES ('jan@mail.nl', 1);
INSERT INTO `mydb`.`PersMail` (`email`, `idPers`) VALUES ('petra@mail.net', 1);
INSERT INTO `mydb`.`PersMail` (`email`, `idPers`) VALUES ('mbo@mail.com', 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`SpeciaalEvenement`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`SpeciaalEvenement` (`idSpeciaalEvenement`, `beschrijving`) VALUES (1, 'Trouwerij');
INSERT INTO `mydb`.`SpeciaalEvenement` (`idSpeciaalEvenement`, `beschrijving`) VALUES (2, 'Vergadering');
INSERT INTO `mydb`.`SpeciaalEvenement` (`idSpeciaalEvenement`, `beschrijving`) VALUES (3, 'Feesten');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Onderhoud`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Onderhoud` (`idOnderhoud`, `beschrijving`) VALUES (1, 'Noodgevallen');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Verbouwing`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Verbouwing` (`idVerbouwing`, `beschrijving`) VALUES (1, 'Aanpassing zaal indeling');
INSERT INTO `mydb`.`Verbouwing` (`idVerbouwing`, `beschrijving`) VALUES (2, 'Aanpassing zaal licht');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Zaal`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Zaal` (`idZaal`, `zaalStatus`, `zaalBeschrijving`) VALUES (1, 'Open', 'Goede, nieuwe zaal');
INSERT INTO `mydb`.`Zaal` (`idZaal`, `zaalStatus`, `zaalBeschrijving`) VALUES (2, 'Open', 'Oude, klassieke zaal');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Agenda`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Agenda` (`begin`, `eind`, `zaal`, `optreden`, `speciaalEvenement`, `onderhoud`, `verbouwing`, `itemstatus`) VALUES ('2016-03-04 09:00:00', '2016-03-04 23:30:00', 2, 1, NULL, NULL, NULL, NULL);
INSERT INTO `mydb`.`Agenda` (`begin`, `eind`, `zaal`, `optreden`, `speciaalEvenement`, `onderhoud`, `verbouwing`, `itemstatus`) VALUES ('2016-03-03 08:00:00', '2016-03-03 23:00:00', 1, 2, NULL, NULL, NULL, NULL);
INSERT INTO `mydb`.`Agenda` (`begin`, `eind`, `zaal`, `optreden`, `speciaalEvenement`, `onderhoud`, `verbouwing`, `itemstatus`) VALUES ('2016-03-05', '2016-03-08', 2, NULL, NULL, 1, NULL, NULL);
INSERT INTO `mydb`.`Agenda` (`begin`, `eind`, `zaal`, `optreden`, `speciaalEvenement`, `onderhoud`, `verbouwing`, `itemstatus`) VALUES ('2016-03-09', '2016-03-12', 1, NULL, NULL, NULL, 1, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`ArtiestGenre`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`ArtiestGenre` (`idArtiest`, `genreID`) VALUES (1, 3);
INSERT INTO `mydb`.`ArtiestGenre` (`idArtiest`, `genreID`) VALUES (2, 2);
INSERT INTO `mydb`.`ArtiestGenre` (`idArtiest`, `genreID`) VALUES (3, 1);
INSERT INTO `mydb`.`ArtiestGenre` (`idArtiest`, `genreID`) VALUES (2, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`Login`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Login` (`idGebruiker`, `email`, `wachtwoord`) VALUES (1, 'harry@mail.nl', '123');
INSERT INTO `mydb`.`Login` (`idGebruiker`, `email`, `wachtwoord`) VALUES (2, 'jochem@mail.nl', '123');
INSERT INTO `mydb`.`Login` (`idGebruiker`, `email`, `wachtwoord`) VALUES (3, 'jan@mail.nl', '123');
INSERT INTO `mydb`.`Login` (`idGebruiker`, `email`, `wachtwoord`) VALUES (4, 'jasmine@mail.nl', '123');
INSERT INTO `mydb`.`Login` (`idGebruiker`, `email`, `wachtwoord`) VALUES (5, 'mien@mail.nl', '123');
INSERT INTO `mydb`.`Login` (`idGebruiker`, `email`, `wachtwoord`) VALUES (6, 'peter@mail.nl', '123');
INSERT INTO `mydb`.`Login` (`idGebruiker`, `email`, `wachtwoord`) VALUES (7, 'kees@mail.nl', '123');
INSERT INTO `mydb`.`Login` (`idGebruiker`, `email`, `wachtwoord`) VALUES (8, 'sanne@mail.nl', '123');
INSERT INTO `mydb`.`Login` (`idGebruiker`, `email`, `wachtwoord`) VALUES (9, 'anne@mail.nl', '123');
INSERT INTO `mydb`.`Login` (`idGebruiker`, `email`, `wachtwoord`) VALUES (10, 'lisa@mail.nl', '123');

COMMIT;

